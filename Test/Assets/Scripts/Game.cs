//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.18444
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections;
using System.Threading;
using System.Collections.Generic;
using Newtonsoft.Json;
using Const;

using S2C = Packet.S2C;
using C2S = Packet.C2S;

using ProtoBuf.Meta;


public class Game : MonoBehaviour
{
    private static Game instance;

	public static Game Inst
	{
		get
		{
			if (instance == null) {
				instance = new Game ();
			}
			return instance;
		}
	}

    public static bool IsInitialized() { return instance != null; }

	public bool IsMapLoaded() { return map != null; }

	public GameObject netManagerObject;
	public Vector3 spawnPosition;
	public GameObject playerPrefab;
    public ProjectileSet projectileSet;
    public MapData mapData;
    public GameMenu gameMenu;

    public Map map;
	NetworkManager netManager;
	MapLoader mapLoader;

    InputFocus focus;

    private int ID = -1;

    public int GetID()
    {
        return ID;
    }

    public bool IsFocused(InputFocus focus, params InputFocus[] focusList)
    {
        bool result = this.focus == focus;

        foreach (InputFocus focusVal in focusList)
        {
            if (result == true)
                break;

            result = this.focus == focusVal;
        }

        return result;
    }

    public void FreeFocus(InputFocus focus)
    {
        focus = InputFocus.PLAYER;
    }
    
    public Vector2 RevivalLocation;

    bool isQuitting = false;

    void Init()
    {
        instance = this;
        RevivalLocation = new Vector2(0f, 3f);

        RuntimeTypeModel.Default.Add(typeof(Vector3), true);
        RuntimeTypeModel.Default.Add(typeof(Vector2), true);
    }

	void Awake()
	{
        Init();
		netManager = netManagerObject.GetComponent<NetworkManager> ();
		mapLoader = GetComponent<MapLoader> ();

	}

	public void LoadMap()
	{
        GameObject mapPrefab = mapLoader.GetMap();

        GameObject mapObj = (GameObject)Network.Instantiate(mapPrefab, Vector3.zero, Quaternion.identity, 0);
	}

    public void SetMap(Map map)
    {
        this.map = map;
    }

	public void StartServerGame()
	{
		ClearGame ();

		if (!IsMapLoaded())
		{
			LoadMap();
		}

        SetMyID(PlayerManager.Inst.SetID(PlayerManager.Inst.GetUniqueID(), Network.player));

        OpenGameMenu();
	}

	void OnPlayerConnected(NetworkPlayer player)
	{
        if (PlayerManager.Inst.Exists(player))
        {
            //Clear previous connection;
            return;
        }

        int ID = PlayerManager.Inst.SetID(PlayerManager.Inst.GetUniqueID(), player);
        networkView.RPC("SetPlayerID", player, ID);
	}
    
    [RPC]
    void SetPlayerID(int newID, NetworkMessageInfo info)
    {
        if (!Network.isClient)
        { 
            return;
        }
     
        SetMyID(newID);

        networkView.RPC("PlayerListRequest", RPCMode.Server, ID);

        OpenGameMenu();
    }

    void SetMyID(int newID)
    {
        ID = newID;
    }

    void OpenGameMenu()
    {
        gameMenu.gameObject.SetActive(true);
    }

    [RPC]
    public void EnterCharacter(byte[] settingData, NetworkMessageInfo info)
    {
        PlayerSetting setting = PlayerSetting.DeserializeFromBytes(settingData);

        if (!Network.isServer) return;
        if (!PlayerManager.Inst.IsValidPlayer(setting.playerID, info.sender)) return;

        OnEnterCharacter(setting);
    }

    public void OnEnterCharacter(PlayerSetting setting)
    {
        if (!Network.isServer) return;

        Debug.Log(String.Format("Player Ready {0}", setting.playerID));

        PlayerManager.Inst.SetSetting(setting);
        networkView.RPC("NewPlayer", RPCMode.Others, setting.SerializeToBytes());

        GameObject newPlayer = Game.Inst.MakeNetworkPlayer();
        PlayerBehaviour character = newPlayer.GetComponent<PlayerBehaviour>();
        character.OnSetOwner(setting.playerID);
        newPlayer.networkView.RPC("SetOwner", RPCMode.OthersBuffered, setting.playerID);
    }

    [RPC]
    void NewPlayer(byte[] settingData)
    {
        if (!Network.isClient) return;
        //ServerCheck
        
        PlayerSetting setting = PlayerSetting.DeserializeFromBytes(settingData);
        PlayerManager.Inst.SetSetting(setting);
    }

    [RPC]
    void PlayerListRequest(int requestorID, NetworkMessageInfo info)
    {
        if (!Network.isServer) return;
        if (!PlayerManager.Inst.IsValidPlayer(ID, info.sender)) return;
            
        networkView.RPC("SetPlayerList", info.sender,
            JsonConvert.SerializeObject(PlayerManager.Inst.GetSettings(), Formatting.None, new JsonSerializerSettings() { ReferenceLoopHandling = ReferenceLoopHandling.Ignore }));
    }

    [RPC]
    void SetPlayerList(string settingList, NetworkMessageInfo info)
    {
        if (!Network.isClient)
            return;

        List<PlayerSetting> settings = JsonConvert.DeserializeObject<List<PlayerSetting>>(settingList);

        foreach (PlayerSetting setting in settings)
        {
            PlayerManager.Inst.SetSetting(setting);
        }
    }

    void OnDisconnectedFromServer(NetworkDisconnection info)
    {
        if (Network.isServer)
        {
            OnServerDown();
        }

        if (Network.isClient)
        {
            OnServerDown();
        }
    }

    void OnServerDown()
    {
        PlayerManager.Inst.Clear();
        ProjectileManager.Inst.Clear();

        map = null;
    }


	public GameObject MakeNetworkPlayer()
	{
		return (GameObject)Network.Instantiate (playerPrefab, spawnPosition, Quaternion.identity, 0);
	}

    public void ClearGame()
    {
        PlayerManager.Inst.Clear();

		map = null;
		networkView.RPC ("ClientClearGame", RPCMode.Others);
    }

	[RPC]
	public void ClientClearGame()
	{
		map = null;
	}

    

    // Projectile management

    

    

    void OnApplicationQuit()
    {
        isQuitting = true;
    }

    public bool IsQuitting()
    {
        return isQuitting;
    }

}